{
  "props": {
    "/app/src/docs/_props/epam-promo/components/buttons/button.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50",
        "comment": "<p>Button color</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light",
        "comment": "<p>Fill style: solid (normal), light (washed color), white, or none (just button label is visible)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "mode",
        "value": "none | solid | outline | ghost",
        "comment": null
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18",
        "comment": "<p>Button size</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/buttons/iconButton.props.tsx": [
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "blue | green | red | gray50 | amber | gray30 | gray60",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/buttons/linkButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/buttons/tabButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "36 | 48 | 60",
        "comment": "<p>Tab button size</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "withNotify",
        "value": "boolean",
        "comment": "<p>Show notification red dot</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/buttons/verticalTabButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "36 | 48 | 60",
        "comment": "<p>Tab button size</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "withNotify",
        "value": "boolean",
        "comment": "<p>Show notification red dot</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/datePickers/datePicker.props.tsx": [
      {
        "name": "bodyCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disable clearing date value (e.g. via cross icon)</p>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>Filter selectable days. Days, for which this callback returns false - will be disabled</p>"
      },
      {
        "name": "format",
        "value": "string",
        "comment": "<p>Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>Styles for input and body components in DatePicker</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>If this function returns true, the day will be highlighted as holiday</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>Attributes for HTML Element</p>"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides rendering of the single day. For example, to highlight certain days</p>"
      },
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode",
        "comment": "<p>render prop to add a custom footer inside the DatePicker dropdown body</p>"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": "<p>Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/datePickers/rangeDatePicker.props.tsx": [
      {
        "name": "bodyCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disables clearing component (with the cross icon)</p>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>Filter selectable days. Days, for which this callback returns false - will be disabled</p>"
      },
      {
        "name": "format",
        "value": "string",
        "comment": "<p>Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)</p>"
      },
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string",
        "comment": null
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>Styles for input and body components in RangeDatePicker</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>If this function returns true, the day will be highlighted as holiday</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: \"from\" | \"to\") => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: \"from\" | \"to\") => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets",
        "comment": "<p>Range presets (like &#39;this week&#39;, &#39;this month&#39;, etc.) to display at the right of the Picker&#39;s body.\r\nUUI provides defaults in the &#39;rangeDatePickerPresets&#39; exported variable - you can use it as is, or build on top of it (e.g. add your presets)</p>"
      },
      {
        "name": "rawProps",
        "value": "{ from?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; to?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>rawProps as HTML attributes</p>"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides rendering of the single day. For example, to highlight certain days</p>"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode",
        "comment": "<p>Allows to add a custom footer to the Picker&#39;s dropdown body</p>"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": "<p>Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/checkbox.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Check icon</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "<p>Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values</p>"
      },
      {
        "name": "indeterminateIcon",
        "value": "Icon",
        "comment": "<p>Indeterminate state icon</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": "<p>Checkbox size</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/multiSwitch.props.tsx": [
      {
        "name": "color",
        "value": "blue | gray50",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/numericInput.props.ts": [
      {
        "name": "align",
        "value": "left | right",
        "comment": "<p>Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "disableArrows",
        "value": "boolean",
        "comment": "<p>Turn off up/down (increase/decrease) buttons</p>"
      },
      {
        "name": "disableLocaleFormatting",
        "value": "boolean",
        "comment": "<p>Turns off locale-based formatting, standard Number.toString() is used instead</p>"
      },
      {
        "name": "downIcon",
        "value": "Icon",
        "comment": "<p>Overrides the down/decrease icon</p>"
      },
      {
        "name": "formatOptions",
        "value": "Intl.NumberFormatOptions",
        "comment": "<p>Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}</p>"
      },
      {
        "name": "formatValue",
        "value": "(value: number) => string",
        "comment": "<p>A function to convert current input value to displayed text.\r\nOverrides standard Intl-based formatting.\r\nIf passed, only maximumFractionDigits considered from formatOptions when both properties provided.\r\nNote, that formatting is used when input is out of focus.</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS classes to put directly on the Input element</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "max",
        "value": "number",
        "comment": "<p>Maximum value (default is Number.MAX_SAFE_INTEGER)</p>"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "<p>Minimum value (default is 0)</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "step",
        "value": "number",
        "comment": "<p>Increase/decrease step (for icons and )</p>"
      },
      {
        "name": "upIcon",
        "value": "Icon",
        "comment": "<p>Overrides the up/increase icon</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/radioInput.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/rating.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "emptyStarIcon",
        "value": "any",
        "comment": null
      },
      {
        "name": "filledStarIcon",
        "value": "any",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "from",
        "value": "number",
        "comment": null
      },
      {
        "name": "hideTooltip",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "hint",
        "value": "(value: number) => string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 24 | 30",
        "comment": null
      },
      {
        "name": "step",
        "value": "1 | 0.5",
        "comment": null
      },
      {
        "name": "to",
        "value": "number",
        "comment": null
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/searchInput.props.ts": [
      {
        "name": "acceptIcon",
        "value": "Icon",
        "comment": "<p>Overrides accept (check) icon</p>"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a></p>"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Put focus on the element, when component is mounted</p>"
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": "<p>Overrides cancel (cross) icon</p>"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "debounceDelay",
        "value": "number",
        "comment": "<p>Debounce delay in ms</p>"
      },
      {
        "name": "disableDebounce",
        "value": "boolean",
        "comment": "<p>Pass true to disable debouncing</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides dropdown (chevron) icon</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID attribute for input</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put to the HTML Input element</p>"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "<p>Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a></p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum input length in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a></p>"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "<p>Enables accept (check) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "<p>Enables cancel (cross) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>keydown event handler to put on the HTML input element</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix to render before the input. Can be used to display in-place labels</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderInput",
        "value": "(props: IRenderInputProps) => JSX.Element",
        "comment": "<p>overrides rendering of HTML Input element</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix to render after the input. Can be used to display unit or currency</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "<p>Standard &#39;type&#39; attribute to put on the HTML input element (e.g. &#39;password&#39;)</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/switch.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/textArea.props.ts": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Automatically sets input focus to component, when its mounted</p>"
      },
      {
        "name": "autoSize",
        "value": "boolean",
        "comment": "<p>Enables auto-resizing height to fit text. Rows prop is ignored in this mode</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML id attribute to put on the HTML Input element</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class names to put to the HTML Input element</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum text length, in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>onKeyDown event handler to put on HTML Input</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rows",
        "value": "number",
        "comment": "<p>Adjust height to fit specified number or text rows. HTML TextArea attribute.</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/textInput.props.ts": [
      {
        "name": "acceptIcon",
        "value": "Icon",
        "comment": "<p>Overrides accept (check) icon</p>"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a></p>"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Put focus on the element, when component is mounted</p>"
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": "<p>Overrides cancel (cross) icon</p>"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides dropdown (chevron) icon</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID attribute for input</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put to the HTML Input element</p>"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "<p>Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a></p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum input length in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "name",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a></p>"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "<p>Enables accept (check) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "<p>Enables cancel (cross) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>keydown event handler to put on the HTML input element</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix to render before the input. Can be used to display in-place labels</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderInput",
        "value": "(props: IRenderInputProps) => JSX.Element",
        "comment": "<p>overrides rendering of HTML Input element</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix to render after the input. Can be used to display unit or currency</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "<p>Standard &#39;type&#39; attribute to put on the HTML input element (e.g. &#39;password&#39;)</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/inputs/timePicker.props.ts": [
      {
        "name": "format",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "minutesStep",
        "value": "number",
        "comment": null
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": null
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/accordion.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "mode",
        "value": "inline | block",
        "comment": "<p>&#39;block&#39; mode: render as separate panel (with padding, borders, shadows). &#39;inline&#39; mode - renders no outside panel, suitable for placing in a panel with other components</p>"
      },
      {
        "name": "padding",
        "value": "18 | 0 | 6 | 12",
        "comment": "<p>Padding inside the panel</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpen: boolean) => React.ReactNode",
        "comment": "<p>Renders additional items to component&#39;s header (after the title, and before the folding icon)</p>"
      },
      {
        "name": "renderTitle",
        "value": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides default title rendering.</p>"
      },
      {
        "name": "title",
        "value": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Accordion title</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/blocker.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "hideSpinner",
        "value": "boolean",
        "comment": "<p>Disables spinner animation display</p>"
      },
      {
        "name": "isEnabled",
        "value": "boolean",
        "comment": "<p>Turns the blocker on or off</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode",
        "comment": "<p>Replaces default spinner</p>"
      },
      {
        "name": "spacerHeight",
        "value": "number",
        "comment": "<p>Sets the minimal height in px, for cases when blocked content is empty</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/checkboxGroup.props.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>",
        "comment": "<p>Overrides the component to render a single checkbox</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "horizontal | vertical",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]",
        "comment": "<p>Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/controlGroup.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/FlexItems/flexCell.props.tsx": [
      {
        "name": "alignSelf",
        "value": "string",
        "comment": "<p>Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)</p>"
      },
      {
        "name": "background",
        "value": "none | white | gray5",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "6 | 12 | 18 | 24 | 36",
        "comment": "<p>Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "grow",
        "value": "number",
        "comment": "<p>Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)</p>"
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "minWidth",
        "value": "number",
        "comment": "<p>CSS min-width</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": "<p>Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "shrink",
        "value": "number",
        "comment": "<p>Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "<p>Standard style attribute. Styles are added to element style, overriding supplied flex styles</p>"
      },
      {
        "name": "textAlign",
        "value": "left | right | center",
        "comment": "<p>CSS text-align property</p>"
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      },
      {
        "name": "width",
        "value": "auto | 100%",
        "comment": "<p>CSS width. Set to &#39;auto&#39; to make FlexCell resize to it&#39;s content</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/FlexItems/flexRow.props.tsx": [
      {
        "name": "alignItems",
        "value": "center | top | bottom | stretch",
        "comment": "<p>Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)</p>"
      },
      {
        "name": "background",
        "value": "none | white | gray5",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": "<p>Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": "<p>Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/FlexItems/panel.props.tsx": [
      {
        "name": "background",
        "value": "white | gray90",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "margin",
        "value": "\"24\"",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "shadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/iconContainer.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "flipY",
        "value": "boolean",
        "comment": "<p>Flips the icon vertically</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon to display</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void",
        "comment": "<p>Click handler</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw",
        "comment": "<p>Rotate the icon (cw stands for &#39;clock-wise&#39;, ccw stands for &#39;counter clock-wise))</p>"
      },
      {
        "name": "size",
        "value": "number",
        "comment": "<p>Icon size in pixels (both width and height, as icons are assumed to be square-shaped)</p>"
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "<p>CSS style prop to put on the component</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/labeledInput.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "htmlFor",
        "value": "string",
        "comment": "<p>HTML &#39;for&#39; tag to bind the label to a component.\r\nCan be used when component can&#39;t be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns</p>"
      },
      {
        "name": "info",
        "value": "string",
        "comment": "<p>Info hint text to show in tooltip</p>"
      },
      {
        "name": "infoIcon",
        "value": "Icon",
        "comment": "<p>Overrides the default info icon</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOptional",
        "value": "boolean",
        "comment": "<p>Marks related field as optional</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "labelPosition",
        "value": "left | top",
        "comment": "<p>Position of the label, relative to the wrapped component (top of left)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": "<p>Overrides the default Tooltip component to use for info tooltip</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/layout/radioGroup.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "horizontal | vertical",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>",
        "comment": null
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.Key; }",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/navigation/anchor.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/navigation/mainMenu.props.tsx": [
      {
        "name": "alwaysShowBurger",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "appLogoBgColor",
        "value": "string",
        "comment": null
      },
      {
        "name": "appLogoUrl",
        "value": "string",
        "comment": null
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>",
        "comment": null
      },
      {
        "name": "children",
        "value": "any",
        "comment": null
      },
      {
        "name": "customerLogoBgColor",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoHref",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoLink",
        "value": "Link",
        "comment": null
      },
      {
        "name": "customerLogoUrl",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "externalGap",
        "value": "number",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isTransparent",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "items",
        "value": "{ render: (item: any, hiddenItems?: any[], displayedItems?: any[]) => any; priority: number; collapsedContainer?: boolean; id: string; }[]",
        "comment": null
      },
      {
        "name": "logoHref",
        "value": "string",
        "comment": null
      },
      {
        "name": "logoLink",
        "value": "Link",
        "comment": null
      },
      {
        "name": "logoWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>",
        "comment": null
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode",
        "comment": null
      },
      {
        "name": "serverBadge",
        "value": "string",
        "comment": null
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/alert.props.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]",
        "comment": "<p>List of actions to display in the alert. Each action has name and &#39;action&#39; callback</p>"
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "color",
        "value": "blue | green | red | amber",
        "comment": "<p>Alert color</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>An optional icon to show on the left of the alert</p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": "<p>When specified, a close icon is rendered. onClose callback will be called on clicking the close icon</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/dropdown.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": null
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": null
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Should we close dropdown on click on the Toggler, if it&#39;s already open? Default is true.</p>"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "openOnHover",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": null
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "zIndex",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/dropdownContainer.props.tsx": [
      {
        "name": "arrowProps",
        "value": "PopperArrowProps",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | gray70",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "height",
        "value": "number",
        "comment": null
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "maxWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 30 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<T>",
        "comment": null
      },
      {
        "name": "scheduleUpdate",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "showArrow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": null
      },
      {
        "name": "togglerHeight",
        "value": "number",
        "comment": null
      },
      {
        "name": "togglerWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 30 | 48 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "width",
        "value": "auto",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/modalFooter.props.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "borderTop",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/modalHeader.props.tsx": [
      {
        "name": "background",
        "value": "none | white | gray5",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => any",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "title",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/notificationCard.props.tsx": [
      {
        "name": "actions",
        "value": "NotificationAction[]",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clearTimer",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray60",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "id",
        "value": "number",
        "comment": null
      },
      {
        "name": "key",
        "value": "string",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onSuccess",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "refreshTimer",
        "value": "() => void",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/overlays/tooltip.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": "<p>See  <a href='https://popper.js.org/docs/v2/modifiers/prevent-overflow/'>Popper docs</a></p>"
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": "<p>React Node(s) to show tooltip for</p>"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": "<p>Set delay for close. Default: 0</p>"
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | red | gray90",
        "comment": "<p>Tooltip color</p>"
      },
      {
        "name": "content",
        "value": "any",
        "comment": "<p>Content to show in the tooltip (ReactNode)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxWidth",
        "value": "number",
        "comment": "<p>Max width of tooltip</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "offset",
        "value": "Offset",
        "comment": "<p>See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a></p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Set delay for open. Default: 0</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Tooltip position relative to the wrapped content. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": "<p>Overrides React Portal target to use</p>"
      },
      {
        "name": "renderContent",
        "value": "() => any",
        "comment": "<p>Alternative to &#39;content&#39; prop, you can pass a render function.\r\nThe function will only be called when content is shown, this can save performance.</p>"
      },
      {
        "name": "trigger",
        "value": "click | press | hover | manual",
        "comment": "<p>Defines when to show the tooltip: &#39;hover&#39; - default and usual, &#39;press&#39; - only when mouse button is down, &#39;manual&#39; - visibility is controlled with isVisible prop</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/pickers/pickerInput.props.tsx": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Sets focus to component when it&#39;s mounted</p>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disallow to clear Picker value (cross icon)</p>"
      },
      {
        "name": "dropdownHeight",
        "value": "number",
        "comment": "<p>Overrides default height of the dropdown body</p>"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal",
        "comment": "<p>dropdown (default) - show selection in dropdown; modal - opens modal window to select items</p>"
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean",
        "comment": "<p>Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to &#39;jump&#39; after adding a filter.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "isSingleLine",
        "value": "boolean",
        "comment": "<p>Prevents selected items tags to occupy multiple lines</p>"
      },
      {
        "name": "maxItems",
        "value": "number",
        "comment": "<p>Maximum number of tags to display in input, before collapsing to &quot;N items selected&quot; mode</p>"
      },
      {
        "name": "minBodyWidth",
        "value": "number",
        "comment": "<p>Minimum width of dropdown body</p>"
      },
      {
        "name": "minCharsToSearch",
        "value": "number",
        "comment": "<p>Minimum characters to type, before search will trigger (default is 1)</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": "<p>Defines input mode: &#39;form&#39; is default and usual look, &#39;cell&#39; is for using components as table cells</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix text to add to the input</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>HTML attributes to put directly to the input and body elements</p>"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Adds custom footer to the dropdown body</p>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Replaces default &#39;toggler&#39; - an input to which Picker attaches dropdown</p>"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body",
        "comment": "<p>Defines where search field is:\r\n&#39;input&#39; - try to place search inside the toggler (default for single-select),\r\n&#39;body&#39; - put search inside the dropdown (default for multi-select)\r\n&#39;none&#39; - disables search completely</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": "<p>Component&#39;s size in px. This is &#39;logical&#39; size, defined in how many pixels components occupies vertically.</p>"
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix text to add to the input</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/pickers/pickerList.props.tsx": [
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "defaultIds",
        "value": "TId[]",
        "comment": "<p>Ids of items to show first.\r\nIf not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)</p>"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxDefaultItems",
        "value": "number",
        "comment": "<p>Number of default items to show initially, when nothing is selected.\r\nDefault it 10 items</p>"
      },
      {
        "name": "maxTotalItems",
        "value": "number",
        "comment": "<p>Maximum total number of items to show, including selected</p>"
      },
      {
        "name": "noOptionsMessage",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderModalToggler",
        "value": "(props: DataRowProps<TItem, TId>[]) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "settingsKey",
        "value": "string",
        "comment": "<p>If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/typography/richTextView.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "htmlContent",
        "value": "any",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/typography/text.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "gray50 | gray60 | gray90 | gray5 | gray80",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-italic | museo-sans | museo-slab",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/typography/textPlaceholder.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "wordsCount",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/avatar.props.tsx": [
      {
        "name": "alt",
        "value": "string",
        "comment": "<p>HTML alt attribute value</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "img",
        "value": "string",
        "comment": "<p>Image URL</p>"
      },
      {
        "name": "isLoading",
        "value": "boolean",
        "comment": "<p>True to show placeholder</p>"
      },
      {
        "name": "onClick",
        "value": "() => void",
        "comment": "<p>Click handler</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144",
        "comment": "<p>Size</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/avatarStack.props.tsx": [
      {
        "name": "avatarsCount",
        "value": "number",
        "comment": null
      },
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": null
      },
      {
        "name": "urlArray",
        "value": "string[]",
        "comment": null
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/badge.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "blue | green | red | amber | gray30 | cyan | orange | purple | violet",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "fill",
        "value": "solid | transparent | semitransparent",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/paginator.props.tsx": [
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any",
        "comment": "<p>Override default rendering, keeping the component behavior</p>"
      },
      {
        "name": "size",
        "value": "24 | 30",
        "comment": "<p>Component size</p>"
      },
      {
        "name": "totalPages",
        "value": "number",
        "comment": "<p>Total number of pages</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/spinner.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/epam-promo/components/widgets/tag.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/buttons/button.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": "<p>Component color</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "shape",
        "value": "round | square",
        "comment": null
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/buttons/iconButton.props.ts": [
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/buttons/linkButton.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light",
        "comment": null
      },
      {
        "name": "fontSize",
        "value": "18 | 10 | 12 | 14 | 16",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "lineHeight",
        "value": "24 | 30 | 18 | 12",
        "comment": null
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/buttons/tabButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "36 | 48 | 60",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "theme",
        "value": "light | dark",
        "comment": null
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "withNotify",
        "value": "boolean",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/buttons/verticalTabButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "36 | 48 | 60",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "theme",
        "value": "light | dark",
        "comment": null
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "withNotify",
        "value": "boolean",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/datePickers/calendar.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "displayedDate",
        "value": "Dayjs",
        "comment": null
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getDayCX",
        "value": "(day: Dayjs) => any",
        "comment": null
      },
      {
        "name": "hideAnotherMonths",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(day: Dayjs) => void",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
        "comment": null
      },
      {
        "name": "value",
        "value": "TSelection",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/datePickers/datePicker.props.tsx": [
      {
        "name": "bodyCx",
        "value": "any",
        "comment": null
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disable clearing date value (e.g. via cross icon)</p>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>Filter selectable days. Days, for which this callback returns false - will be disabled</p>"
      },
      {
        "name": "format",
        "value": "string",
        "comment": "<p>Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>Styles for input and body components in DatePicker</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>If this function returns true, the day will be highlighted as holiday</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e?: React.FocusEvent<HTMLInputElement, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>Attributes for HTML Element</p>"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides rendering of the single day. For example, to highlight certain days</p>"
      },
      {
        "name": "renderFooter",
        "value": "() => React.ReactNode",
        "comment": "<p>render prop to add a custom footer inside the DatePicker dropdown body</p>"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": "<p>Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach DatePicker to other components, e.g. Buttons</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/datePickers/rangeDatePicker.props.tsx": [
      {
        "name": "bodyCx",
        "value": "any",
        "comment": null
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disables clearing component (with the cross icon)</p>"
      },
      {
        "name": "filter",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>Filter selectable days. Days, for which this callback returns false - will be disabled</p>"
      },
      {
        "name": "format",
        "value": "string",
        "comment": "<p>Date format string, see [dayjs docs](@link https://day.js.org/docs/en/display/format)</p>"
      },
      {
        "name": "getPlaceholder",
        "value": "(type: InputType) => string",
        "comment": null
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>Styles for input and body components in RangeDatePicker</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isHoliday",
        "value": "(day: Dayjs) => boolean",
        "comment": "<p>If this function returns true, the day will be highlighted as holiday</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: \"from\" | \"to\") => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<HTMLInputElement, Element>, inputType: \"from\" | \"to\") => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "presets",
        "value": "RangeDatePickerPresets",
        "comment": "<p>Range presets (like &#39;this week&#39;, &#39;this month&#39;, etc.) to display at the right of the Picker&#39;s body.\r\nUUI provides defaults in the &#39;rangeDatePickerPresets&#39; exported variable - you can use it as is, or build on top of it (e.g. add your presets)</p>"
      },
      {
        "name": "rawProps",
        "value": "{ from?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; to?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>rawProps as HTML attributes</p>"
      },
      {
        "name": "renderDay",
        "value": "(day: Dayjs) => void) => React.ReactElement<Element, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides rendering of the single day. For example, to highlight certain days</p>"
      },
      {
        "name": "renderFooter",
        "value": "(value: RangeDatePickerValue) => React.ReactNode",
        "comment": "<p>Allows to add a custom footer to the Picker&#39;s dropdown body</p>"
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": "<p>Overrides rendering of picker Target - component which triggers dropdown. Can be used to attach RangeDatePicker to other components, e.g. Buttons</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/checkbox.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Check icon</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "<p>Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values</p>"
      },
      {
        "name": "indeterminateIcon",
        "value": "Icon",
        "comment": "<p>Indeterminate state icon</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "theme",
        "value": "light | dark",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/multiSwitch.props.tsx": [
      {
        "name": "color",
        "value": "sky | night600",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "MultiSwitchItem<TValue>[]",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/numericInput.props.ts": [
      {
        "name": "align",
        "value": "left | right",
        "comment": "<p>Align text inside the component. Useful for tables (in cell-mode) - to align numbers in table column</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "disableArrows",
        "value": "boolean",
        "comment": "<p>Turn off up/down (increase/decrease) buttons</p>"
      },
      {
        "name": "disableLocaleFormatting",
        "value": "boolean",
        "comment": "<p>Turns off locale-based formatting, standard Number.toString() is used instead</p>"
      },
      {
        "name": "downIcon",
        "value": "Icon",
        "comment": "<p>Overrides the down/decrease icon</p>"
      },
      {
        "name": "formatOptions",
        "value": "Intl.NumberFormatOptions",
        "comment": "<p>Number formatting options. See #{link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat}</p>"
      },
      {
        "name": "formatValue",
        "value": "(value: number) => string",
        "comment": "<p>A function to convert current input value to displayed text.\r\nOverrides standard Intl-based formatting.\r\nIf passed, only maximumFractionDigits considered from formatOptions when both properties provided.\r\nNote, that formatting is used when input is out of focus.</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS classes to put directly on the Input element</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "max",
        "value": "number",
        "comment": "<p>Maximum value (default is Number.MAX_SAFE_INTEGER)</p>"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "<p>Minimum value (default is 0)</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "step",
        "value": "number",
        "comment": "<p>Increase/decrease step (for icons and )</p>"
      },
      {
        "name": "upIcon",
        "value": "Icon",
        "comment": "<p>Overrides the up/increase icon</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/radioInput.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": null
      },
      {
        "name": "theme",
        "value": "light | dark",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/rating.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "emptyStarIcon",
        "value": "any",
        "comment": null
      },
      {
        "name": "filledStarIcon",
        "value": "any",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "from",
        "value": "number",
        "comment": null
      },
      {
        "name": "hideTooltip",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "hint",
        "value": "(value: number) => string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderRating",
        "value": "(rating: number, markWidth: number, numberOfMarks: number) => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 24 | 30",
        "comment": null
      },
      {
        "name": "step",
        "value": "1 | 0.5",
        "comment": null
      },
      {
        "name": "to",
        "value": "number",
        "comment": null
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/searchInput.props.ts": [
      {
        "name": "acceptIcon",
        "value": "Icon",
        "comment": "<p>Overrides accept (check) icon</p>"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a></p>"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Put focus on the element, when component is mounted</p>"
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": "<p>Overrides cancel (cross) icon</p>"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "debounceDelay",
        "value": "number",
        "comment": "<p>Debounce delay in ms</p>"
      },
      {
        "name": "disableDebounce",
        "value": "boolean",
        "comment": "<p>Pass true to disable debouncing</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides dropdown (chevron) icon</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID attribute for input</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put to the HTML Input element</p>"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "<p>Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a></p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum input length in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "name",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a></p>"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "<p>Enables accept (check) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "<p>Enables cancel (cross) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>keydown event handler to put on the HTML input element</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix to render before the input. Can be used to display in-place labels</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderInput",
        "value": "(props: IRenderInputProps) => JSX.Element",
        "comment": "<p>overrides rendering of HTML Input element</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix to render after the input. Can be used to display unit or currency</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "<p>Standard &#39;type&#39; attribute to put on the HTML input element (e.g. &#39;password&#39;)</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/Slider/rangeSlider.props.ts": [
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": "<p>Component color</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "max",
        "value": "number",
        "comment": "<p>Max value (when slider is at rightmost position)</p>"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "<p>Min value (when slider is at leftmost position)</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string",
        "comment": "<p>Overrides rendering of values labels</p>"
      },
      {
        "name": "showTooltip",
        "value": "boolean",
        "comment": "<p>Toggles rendering of tooltip with current value</p>"
      },
      {
        "name": "splitAt",
        "value": "number",
        "comment": "<p>Slider renders a label at each splitAt position</p>"
      },
      {
        "name": "step",
        "value": "number",
        "comment": "<p>Value change step</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/Slider/slider.props.ts": [
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": "<p>Component color</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "max",
        "value": "number",
        "comment": "<p>Max value (when slider is at rightmost position)</p>"
      },
      {
        "name": "min",
        "value": "number",
        "comment": "<p>Min value (when slider is at leftmost position)</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "(value: number) => string",
        "comment": "<p>Overrides rendering of values labels</p>"
      },
      {
        "name": "showTooltip",
        "value": "boolean",
        "comment": "<p>Toggles rendering of tooltip with current value</p>"
      },
      {
        "name": "splitAt",
        "value": "number",
        "comment": "<p>Slider renders a label at each splitAt position</p>"
      },
      {
        "name": "step",
        "value": "number",
        "comment": "<p>Value change step</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/sliderRating.props.tsx": [
      {
        "name": "from",
        "value": "1 | 2",
        "comment": null
      },
      {
        "name": "getHandlerIcon",
        "value": "(value: number) => Icon",
        "comment": null
      },
      {
        "name": "getScaleIcon",
        "value": "(value: number) => Icon",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderTooltip",
        "value": "(value: TValue) => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 18",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "withoutNa",
        "value": "boolean",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/switch.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/textArea.props.ts": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Automatically sets input focus to component, when its mounted</p>"
      },
      {
        "name": "autoSize",
        "value": "boolean",
        "comment": "<p>Enables auto-resizing height to fit text. Rows prop is ignored in this mode</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML id attribute to put on the HTML Input element</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class names to put to the HTML Input element</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum text length, in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>onKeyDown event handler to put on HTML Input</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rows",
        "value": "number",
        "comment": "<p>Adjust height to fit specified number or text rows. HTML TextArea attribute.</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/textInput.props.ts": [
      {
        "name": "acceptIcon",
        "value": "Icon",
        "comment": "<p>Overrides accept (check) icon</p>"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a></p>"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Put focus on the element, when component is mounted</p>"
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": "<p>Overrides cancel (cross) icon</p>"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides dropdown (chevron) icon</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID attribute for input</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put to the HTML Input element</p>"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "<p>Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a></p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum input length in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "name",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a></p>"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "<p>Enables accept (check) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "<p>Enables cancel (cross) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>keydown event handler to put on the HTML input element</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix to render before the input. Can be used to display in-place labels</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderInput",
        "value": "(props: IRenderInputProps) => JSX.Element",
        "comment": "<p>overrides rendering of HTML Input element</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 60",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix to render after the input. Can be used to display unit or currency</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "<p>Standard &#39;type&#39; attribute to put on the HTML input element (e.g. &#39;password&#39;)</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/inputs/timePicker.props.ts": [
      {
        "name": "format",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "minutesStep",
        "value": "number",
        "comment": null
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": null
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/accordion.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides the default dropdown (folding) icon.Pass null to disable the folding icon completely</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "mode",
        "value": "inline | block",
        "comment": null
      },
      {
        "name": "padding",
        "value": "18 | 0 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderAdditionalItems",
        "value": "(isOpen: boolean) => React.ReactNode",
        "comment": "<p>Renders additional items to component&#39;s header (after the title, and before the folding icon)</p>"
      },
      {
        "name": "renderTitle",
        "value": "(isOpen: boolean) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Overrides default title rendering.</p>"
      },
      {
        "name": "title",
        "value": "string | React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": "<p>Accordion title</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/blocker.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "hideSpinner",
        "value": "boolean",
        "comment": "<p>Disables spinner animation display</p>"
      },
      {
        "name": "isEnabled",
        "value": "boolean",
        "comment": "<p>Turns the blocker on or off</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode",
        "comment": "<p>Replaces default spinner</p>"
      },
      {
        "name": "spacerHeight",
        "value": "number",
        "comment": "<p>Sets the minimal height in px, for cases when blocked content is empty</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/checkboxGroup.props.ts": [
      {
        "name": "CheckboxInput",
        "value": "React.ComponentType<CheckboxProps>",
        "comment": "<p>Overrides the component to render a single checkbox</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "horizontal | vertical",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "CheckboxGroupItem<TValue>[]",
        "comment": "<p>Each item defines: name: string, id: TValue (which item to put into array when item is checked), renderName() - an alternative to passing name</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/controlGroup.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/FlexItems/flexCell.props.tsx": [
      {
        "name": "alignSelf",
        "value": "string",
        "comment": "<p>Flexbox align-self property. Aligns items vertically for horizontal flexbox. [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-align-self)</p>"
      },
      {
        "name": "background",
        "value": "none | white | night50 | night100",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "grow",
        "value": "number",
        "comment": "<p>Flexbox flex-grow property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-grow)</p>"
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "minWidth",
        "value": "number",
        "comment": "<p>CSS min-width</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "shrink",
        "value": "number",
        "comment": "<p>Flexbox shrink property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-flex-shrink)</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "<p>Standard style attribute. Styles are added to element style, overriding supplied flex styles</p>"
      },
      {
        "name": "textAlign",
        "value": "left | right | center",
        "comment": "<p>CSS text-align property</p>"
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "type",
        "value": "form | panel",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      },
      {
        "name": "width",
        "value": "auto | 100%",
        "comment": "<p>CSS width. Set to &#39;auto&#39; to make FlexCell resize to it&#39;s content</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/FlexItems/flexRow.props.tsx": [
      {
        "name": "alignItems",
        "value": "center | top | bottom | stretch",
        "comment": "<p>Flexbox align-items property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)</p>"
      },
      {
        "name": "background",
        "value": "none | white | night50 | night100",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": "<p>Flexbox column gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": "<p>Flexbox row gap property [Flexbox Guide](https://css-tricks.com/snippets/css/a-guide-to-flexbox/#aa-gap-row-gap-column-gap)</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "type",
        "value": "form | panel",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/FlexItems/panel.props.tsx": [
      {
        "name": "background",
        "value": "white | night50",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "margin",
        "value": "\"24\"",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "shadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/iconContainer.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "flipY",
        "value": "boolean",
        "comment": "<p>Flips the icon vertically</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon to display</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "onClick",
        "value": "(e: React.SyntheticEvent<HTMLDivElement, Event>) => void",
        "comment": "<p>Click handler</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rotate",
        "value": "0 | 90cw | 180 | 90ccw",
        "comment": "<p>Rotate the icon (cw stands for &#39;clock-wise&#39;, ccw stands for &#39;counter clock-wise))</p>"
      },
      {
        "name": "size",
        "value": "number",
        "comment": "<p>Icon size in pixels (both width and height, as icons are assumed to be square-shaped)</p>"
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": "<p>CSS style prop to put on the component</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/labeledInput.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "htmlFor",
        "value": "string",
        "comment": "<p>HTML &#39;for&#39; tag to bind the label to a component.\r\nCan be used when component can&#39;t be wrapped by the LabeledInput, e.g. when form is layed out as table with labels and inputs placed into different columns</p>"
      },
      {
        "name": "info",
        "value": "string",
        "comment": "<p>Info hint text to show in tooltip</p>"
      },
      {
        "name": "infoIcon",
        "value": "Icon",
        "comment": "<p>Overrides the default info icon</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOptional",
        "value": "boolean",
        "comment": "<p>Marks related field as optional</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "labelPosition",
        "value": "left | top",
        "comment": "<p>Position of the label, relative to the wrapped component (top of left)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "Tooltip",
        "value": "React.ComponentType<TooltipProps>",
        "comment": "<p>Overrides the default Tooltip component to use for info tooltip</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/layout/radioGroup.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "horizontal | vertical",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "items",
        "value": "RadioGroupItem<TValue>[]",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "RadioInput",
        "value": "React.ComponentType<RadioInputProps>",
        "comment": null
      },
      {
        "name": "radioInputProps",
        "value": "RadioInputProps & { key: React.Key; }",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/navigation/anchor.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/navigation/mainMenu.props.tsx": [
      {
        "name": "alwaysShowBurger",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "appLogoBgColor",
        "value": "string",
        "comment": null
      },
      {
        "name": "appLogoUrl",
        "value": "string",
        "comment": null
      },
      {
        "name": "Burger",
        "value": "React.ComponentType<BurgerProps>",
        "comment": null
      },
      {
        "name": "children",
        "value": "any",
        "comment": null
      },
      {
        "name": "customerLogoBgColor",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoHref",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoLink",
        "value": "Link",
        "comment": null
      },
      {
        "name": "customerLogoUrl",
        "value": "string",
        "comment": null
      },
      {
        "name": "customerLogoWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "externalGap",
        "value": "number",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "isTransparent",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "items",
        "value": "{ render: (item: any, hiddenItems?: any[], displayedItems?: any[]) => any; priority: number; collapsedContainer?: boolean; id: string; }[]",
        "comment": null
      },
      {
        "name": "logoHref",
        "value": "string",
        "comment": null
      },
      {
        "name": "logoLink",
        "value": "Link",
        "comment": null
      },
      {
        "name": "logoWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "MainMenuDropdown",
        "value": "React.ComponentType<MainMenuDropdownProps>",
        "comment": null
      },
      {
        "name": "onLogoClick",
        "value": "(e: React.MouseEvent<Element, MouseEvent>) => any",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderBurger",
        "value": "(props: { onClose: () => void; }) => React.ReactNode",
        "comment": null
      },
      {
        "name": "serverBadge",
        "value": "string",
        "comment": null
      },
      {
        "name": "tooltipTechInfo",
        "value": "React.ReactNode",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/alert.props.tsx": [
      {
        "name": "actions",
        "value": "notificationAction[]",
        "comment": "<p>List of actions to display in the alert. Each action has name and &#39;action&#39; callback</p>"
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "color",
        "value": "sky | grass | sun | fire",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>An optional icon to show on the left of the alert</p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": "<p>When specified, a close icon is rendered. onClose callback will be called on clicking the close icon</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/dropdown.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": null
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": null
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | night",
        "comment": null
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "inMainMenu",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component\nDisables component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "noIcon",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Should we close dropdown on click on the Toggler, if it&#39;s already open? Default is true.</p>"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "openOnHover",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": null
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": null
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "zIndex",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/dropdownContainer.props.tsx": [
      {
        "name": "arrowProps",
        "value": "PopperArrowProps",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | night700",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "height",
        "value": "number",
        "comment": null
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "key",
        "value": "React.Key",
        "comment": null
      },
      {
        "name": "maxWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 30 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<T>",
        "comment": null
      },
      {
        "name": "scheduleUpdate",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "showArrow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "style",
        "value": "React.CSSProperties",
        "comment": null
      },
      {
        "name": "togglerHeight",
        "value": "number",
        "comment": null
      },
      {
        "name": "togglerWidth",
        "value": "number",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 30 | 48 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "width",
        "value": "auto",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/dropdownMenu.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": null
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": null
      },
      {
        "name": "closeOnClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "closeOnTargetClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | night",
        "comment": null
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "inMainMenu",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component\nDisables component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isNotUnfoldable",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "noIcon",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Should we close dropdown on click on the Toggler, if it&#39;s already open? Default is true.</p>"
      },
      {
        "name": "openOnClick",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "openOnHover",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": null
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderBody",
        "value": "(props: DropdownBodyProps) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderTarget",
        "value": "(props: IDropdownToggler) => React.ReactNode",
        "comment": null
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "zIndex",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/dropdownMenuButton.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "white | night",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "inMainMenu",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component\nDisables component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "noIcon",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/modalFooter.props.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "borderTop",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "type",
        "value": "form | panel",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/modalHeader.props.tsx": [
      {
        "name": "background",
        "value": "none | white | night50 | night100",
        "comment": null
      },
      {
        "name": "borderBottom",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "columnGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "margin",
        "value": "24 | 12",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => any",
        "comment": null
      },
      {
        "name": "padding",
        "value": "24 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "rowGap",
        "value": "24 | 36 | 18 | 6 | 12",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "spacing",
        "value": "18 | 6 | 12",
        "comment": null
      },
      {
        "name": "title",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "topShadow",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "type",
        "value": "form | panel",
        "comment": null
      },
      {
        "name": "vPadding",
        "value": "24 | 36 | 48 | 18 | 12",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/notificationCard.props.tsx": [
      {
        "name": "actions",
        "value": "NotificationAction[]",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clearTimer",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "color",
        "value": "sky | grass | sun | fire | night600",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "id",
        "value": "number",
        "comment": null
      },
      {
        "name": "key",
        "value": "string",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onSuccess",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "refreshTimer",
        "value": "() => void",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/snackbarCard.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clearTimer",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "id",
        "value": "number",
        "comment": null
      },
      {
        "name": "key",
        "value": "string",
        "comment": null
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onSuccess",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "refreshTimer",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "snackType",
        "value": "info | success | warning | danger",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/overlays/tooltip.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": "<p>React Node(s) to show tooltip for</p>"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": null
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "content",
        "value": "any",
        "comment": "<p>Content to show in the tooltip (ReactNode)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxWidth",
        "value": "number",
        "comment": "<p>Max width of tooltip</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "offset",
        "value": "Offset",
        "comment": "<p>See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a></p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Should we close dropdown on click on the Toggler, if it&#39;s already open? Default is true.</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": null
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "renderContent",
        "value": "() => any",
        "comment": "<p>Alternative to &#39;content&#39; prop, you can pass a render function.\r\nThe function will only be called when content is shown, this can save performance.</p>"
      },
      {
        "name": "trigger",
        "value": "click | press | hover | manual",
        "comment": "<p>Defines when to show the tooltip: &#39;hover&#39; - default and usual, &#39;press&#39; - only when mouse button is down, &#39;manual&#39; - visibility is controlled with isVisible prop</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/pickers/pickerInput.props.tsx": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Sets focus to component when it&#39;s mounted</p>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disallow to clear Picker value (cross icon)</p>"
      },
      {
        "name": "dropdownHeight",
        "value": "number",
        "comment": "<p>Overrides default height of the dropdown body</p>"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal",
        "comment": "<p>dropdown (default) - show selection in dropdown; modal - opens modal window to select items</p>"
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean",
        "comment": "<p>Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to &#39;jump&#39; after adding a filter.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "isSingleLine",
        "value": "boolean",
        "comment": "<p>Prevents selected items tags to occupy multiple lines</p>"
      },
      {
        "name": "maxItems",
        "value": "number",
        "comment": "<p>Maximum number of tags to display in input, before collapsing to &quot;N items selected&quot; mode</p>"
      },
      {
        "name": "minBodyWidth",
        "value": "number",
        "comment": "<p>Minimum width of dropdown body</p>"
      },
      {
        "name": "minCharsToSearch",
        "value": "number",
        "comment": "<p>Minimum characters to type, before search will trigger (default is 1)</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix text to add to the input</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>HTML attributes to put directly to the input and body elements</p>"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Adds custom footer to the dropdown body</p>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Replaces default &#39;toggler&#39; - an input to which Picker attaches dropdown</p>"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body",
        "comment": "<p>Defines where search field is:\r\n&#39;input&#39; - try to place search inside the toggler (default for single-select),\r\n&#39;body&#39; - put search inside the dropdown (default for multi-select)\r\n&#39;none&#39; - disables search completely</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix text to add to the input</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/pickers/pickerList.props.tsx": [
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "defaultIds",
        "value": "TId[]",
        "comment": "<p>Ids of items to show first.\r\nIf not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)</p>"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxDefaultItems",
        "value": "number",
        "comment": "<p>Number of default items to show initially, when nothing is selected.\r\nDefault it 10 items</p>"
      },
      {
        "name": "maxTotalItems",
        "value": "number",
        "comment": "<p>Maximum total number of items to show, including selected</p>"
      },
      {
        "name": "noOptionsMessage",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderModalToggler",
        "value": "(props: DataRowProps<TItem, TId>[]) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "settingsKey",
        "value": "string",
        "comment": "<p>If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/typography/richTextView.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "htmlContent",
        "value": "any",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "12 | 14 | 16",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/typography/text.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "night50 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "font",
        "value": "sans | sans-semibold | sans-light",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/typography/textPlaceholder.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "wordsCount",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/avatar.props.tsx": [
      {
        "name": "alt",
        "value": "string",
        "comment": "<p>HTML alt attribute value</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "img",
        "value": "string",
        "comment": "<p>Image URL</p>"
      },
      {
        "name": "isLoading",
        "value": "boolean",
        "comment": "<p>True to show placeholder</p>"
      },
      {
        "name": "onClick",
        "value": "() => void",
        "comment": "<p>Click handler</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 60 | 12 | 54 | 72 | 78 | 90 | 144",
        "comment": "<p>Size</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/avatarStack.props.tsx": [
      {
        "name": "avatarsCount",
        "value": "number",
        "comment": null
      },
      {
        "name": "avatarSize",
        "value": "24 | 36 | 48 | 144",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "direction",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderItem",
        "value": "(url: string) => React.ReactElement<any, string | React.JSXElementConstructor<any>>",
        "comment": null
      },
      {
        "name": "urlArray",
        "value": "string[]",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/badge.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light | transparent | semitransparent",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "shape",
        "value": "round | square",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/carousel.props.tsx": [
      {
        "name": "arrowIcon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "color",
        "value": "white | fuchsia | sky | grass | sun | fire | cobalt | lavanda | night50 | night100 | night200 | night300 | night400 | night500 | night600 | night700 | night800 | night900",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "divideBy",
        "value": "number",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "items",
        "value": "Record<string, any>[]",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderItem",
        "value": "(item: Record<string, any>) => React.ReactNode",
        "comment": null
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/paginator.props.tsx": [
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any",
        "comment": "<p>Override default rendering, keeping the component behavior</p>"
      },
      {
        "name": "size",
        "value": "24 | 30",
        "comment": "<p>Component size</p>"
      },
      {
        "name": "totalPages",
        "value": "number",
        "comment": "<p>Total number of pages</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/spinner.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ],
    "/app/src/docs/_props/loveship/components/widgets/tag.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "fill",
        "value": "none | solid | white | light",
        "comment": null
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48 | 18",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/buttons/button.props.tsx": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "color",
        "value": "accent | primary | secondary | negative",
        "comment": null
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "mode",
        "value": "none | solid | outline | ghost",
        "comment": null
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48 | 18",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/buttons/linkButton.props.ts": [
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "captionCX",
        "value": "any",
        "comment": "<p>CSS classes to put on the caption</p>"
      },
      {
        "name": "clearIcon",
        "value": "Icon",
        "comment": "<p>Icon for clear value button (usually cross)</p>"
      },
      {
        "name": "clickAnalyticsEvent",
        "value": "{ [key: string]: any; name: string; }",
        "comment": "<p>An analytics event to send (via AnalyticsContext) when component is clicked.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "count",
        "value": "number",
        "comment": null
      },
      {
        "name": "countPosition",
        "value": "left | right",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Icon for drop-down toggler</p>"
      },
      {
        "name": "dropdownIconPosition",
        "value": "left | right",
        "comment": "<p>Position of the dropdown icon (&#39;left&#39; of &#39;right&#39;)</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "href",
        "value": "string",
        "comment": "<p>Href (URL) to redirect to, for non-SPA redirects</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isLinkActive",
        "value": "boolean",
        "comment": "<p>Highlights component to show that link is active (browser is displaying the page to which link is pointing)</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "link",
        "value": "Link",
        "comment": "<p>Link object to redirect to for SPA-redirects</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "target",
        "value": "\"_blank\"",
        "comment": "<p>Controls where the link should be opened</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/inputs/checkbox.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Check icon</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "indeterminate",
        "value": "boolean",
        "comment": "<p>Sets checkbox in indeterminate state (neither checked or unchecked), which usually means that children elements has both values</p>"
      },
      {
        "name": "indeterminateIcon",
        "value": "Icon",
        "comment": "<p>Indeterminate state icon</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "mode",
        "value": "form | cell",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/inputs/radioInput.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderLabel",
        "value": "() => React.ReactNode",
        "comment": null
      },
      {
        "name": "size",
        "value": "18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": null
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/inputs/switch.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": null
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "label",
        "value": "any",
        "comment": "<p>Label. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "size",
        "value": "24 | 18 | 12",
        "comment": null
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/inputs/textInput.props.ts": [
      {
        "name": "acceptIcon",
        "value": "Icon",
        "comment": "<p>Overrides accept (check) icon</p>"
      },
      {
        "name": "autoComplete",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_autocomplete.asp'>autocomplete attribute</a></p>"
      },
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Put focus on the element, when component is mounted</p>"
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": "<p>Overrides cancel (cross) icon</p>"
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": "<p>Overrides dropdown (chevron) icon</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "id",
        "value": "string",
        "comment": "<p>HTML ID attribute for input</p>"
      },
      {
        "name": "inputCx",
        "value": "any",
        "comment": "<p>CSS class(es) to put to the HTML Input element</p>"
      },
      {
        "name": "inputMode",
        "value": "none | text | search | tel | url | email | numeric | decimal",
        "comment": "<p>Standard <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode'>inputMode attribute</a></p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxLength",
        "value": "number",
        "comment": "<p>Maximum input length in characters</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "name",
        "value": "string",
        "comment": "<p>Standard <a href='https://www.w3schools.com/tags/att_input_name.asp'>name attribute</a></p>"
      },
      {
        "name": "onAccept",
        "value": "() => void",
        "comment": "<p>Enables accept (check) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onCancel",
        "value": "() => void",
        "comment": "<p>Enables cancel (cross) icon, and fires when the icon is clicked</p>"
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e?: any) => void",
        "comment": "<p>keydown event handler to put on the HTML input element</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix to render before the input. Can be used to display in-place labels</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderInput",
        "value": "(props: IRenderInputProps) => JSX.Element",
        "comment": "<p>overrides rendering of HTML Input element</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix to render after the input. Can be used to display unit or currency</p>"
      },
      {
        "name": "tabIndex",
        "value": "number",
        "comment": "<p>Controls the order of keyboard navigation between components</p>"
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "type",
        "value": "string",
        "comment": "<p>Standard &#39;type&#39; attribute to put on the HTML input element (e.g. &#39;password&#39;)</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/layout/blocker.props.ts": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "hideSpinner",
        "value": "boolean",
        "comment": "<p>Disables spinner animation display</p>"
      },
      {
        "name": "isEnabled",
        "value": "boolean",
        "comment": "<p>Turns the blocker on or off</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderSpinner",
        "value": "(props: any) => React.ReactNode",
        "comment": "<p>Replaces default spinner</p>"
      },
      {
        "name": "spacerHeight",
        "value": "number",
        "comment": "<p>Sets the minimal height in px, for cases when blocked content is empty</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/overlays/tooltip.props.tsx": [
      {
        "name": "boundaryElement",
        "value": "clippingParents",
        "comment": null
      },
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": "<p>React Node(s) to show tooltip for</p>"
      },
      {
        "name": "closeBodyOnTogglerHidden",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "closeDelay",
        "value": "number",
        "comment": null
      },
      {
        "name": "closeOnMouseLeave",
        "value": "toggler | boundary",
        "comment": null
      },
      {
        "name": "color",
        "value": "default | contrast | critical",
        "comment": null
      },
      {
        "name": "content",
        "value": "any",
        "comment": "<p>Content to show in the tooltip (ReactNode)</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxWidth",
        "value": "number",
        "comment": "<p>Max width of tooltip</p>"
      },
      {
        "name": "modifiers",
        "value": "(Modifier<any, object>>)[]",
        "comment": null
      },
      {
        "name": "offset",
        "value": "Offset",
        "comment": "<p>See <a href='https://popper.js.org/docs/v2/modifiers/offset/'>Popper docs</a></p>"
      },
      {
        "name": "onClose",
        "value": "() => void",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "openDelay",
        "value": "number",
        "comment": "<p>Should we close dropdown on click on the Toggler, if it&#39;s already open? Default is true.</p>"
      },
      {
        "name": "placement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": null
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "renderContent",
        "value": "() => any",
        "comment": "<p>Alternative to &#39;content&#39; prop, you can pass a render function.\r\nThe function will only be called when content is shown, this can save performance.</p>"
      },
      {
        "name": "trigger",
        "value": "click | press | hover | manual",
        "comment": "<p>Defines when to show the tooltip: &#39;hover&#39; - default and usual, &#39;press&#39; - only when mouse button is down, &#39;manual&#39; - visibility is controlled with isVisible prop</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/pickers/pickerInput.props.tsx": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": "<p>Sets focus to component when it&#39;s mounted</p>"
      },
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": "<p>Disallow to clear Picker value (cross icon)</p>"
      },
      {
        "name": "dropdownHeight",
        "value": "number",
        "comment": "<p>Overrides default height of the dropdown body</p>"
      },
      {
        "name": "dropdownPlacement",
        "value": "left | right | auto | auto-start | auto-end | top | bottom | top-start | top-end | bottom-start | bottom-end | right-start | right-end | left-start | left-end",
        "comment": "<p>Dropdown position relative to the input. See [Popper Docs](@link https://popper.js.org/)</p>"
      },
      {
        "name": "editMode",
        "value": "dropdown | modal",
        "comment": "<p>dropdown (default) - show selection in dropdown; modal - opens modal window to select items</p>"
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "fixedBodyPosition",
        "value": "boolean",
        "comment": "<p>Disables moving the dropdown body, when togglers is moved. Used in filters panel, to prevent filter selection to &#39;jump&#39; after adding a filter.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "isSingleLine",
        "value": "boolean",
        "comment": "<p>Prevents selected items tags to occupy multiple lines</p>"
      },
      {
        "name": "maxItems",
        "value": "number",
        "comment": "<p>Maximum number of tags to display in input, before collapsing to &quot;N items selected&quot; mode</p>"
      },
      {
        "name": "minBodyWidth",
        "value": "number",
        "comment": "<p>Minimum width of dropdown body</p>"
      },
      {
        "name": "minCharsToSearch",
        "value": "number",
        "comment": "<p>Minimum characters to type, before search will trigger (default is 1)</p>"
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "portalTarget",
        "value": "HTMLElement",
        "comment": null
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": "<p>Prefix text to add to the input</p>"
      },
      {
        "name": "rawProps",
        "value": "{ input?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; body?: React.HTMLAttributes<HTMLDivElement> & Record<`data-${string}`, string>; }",
        "comment": "<p>HTML attributes to put directly to the input and body elements</p>"
      },
      {
        "name": "renderFooter",
        "value": "(props: PickerInputFooterProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Adds custom footer to the dropdown body</p>"
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "renderToggler",
        "value": "(props: PickerTogglerProps<TItem, TId>) => React.ReactNode",
        "comment": "<p>Replaces default &#39;toggler&#39; - an input to which Picker attaches dropdown</p>"
      },
      {
        "name": "searchPosition",
        "value": "none | input | body",
        "comment": "<p>Defines where search field is:\r\n&#39;input&#39; - try to place search inside the toggler (default for single-select),\r\n&#39;body&#39; - put search inside the dropdown (default for multi-select)\r\n&#39;none&#39; - disables search completely</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": "<p>Suffix text to add to the input</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/pickers/pickerList.props.tsx": [
      {
        "name": "cascadeSelection",
        "value": "boolean",
        "comment": "<p>Enables selection cascading (parent selects all children, unchecking a child - unchecks all parents)</p>"
      },
      {
        "name": "dataSource",
        "value": "IDataSource<TItem, TId, any>",
        "comment": "<p>Provides items to the Picker</p>"
      },
      {
        "name": "defaultIds",
        "value": "TId[]",
        "comment": "<p>Ids of items to show first.\r\nIf not specified, top props.maxDefaultItems will be shown according to the DataSource sorting settings (default is 10)</p>"
      },
      {
        "name": "disallowClickOutside",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "emptyValue",
        "value": "[]",
        "comment": "<p>Defines which value is to set on clear. E.g. you can put an empty array instead of null for empty multi-select Pickers</p>"
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": "<p>Name of the entity being selected. Affects wording like &quot;Please select [entity]&quot;</p>"
      },
      {
        "name": "entityPluralName",
        "value": "string",
        "comment": "<p>Plural name of the entity being selected. Affects wording like &quot;X [entities] selected&quot;</p>"
      },
      {
        "name": "filter",
        "value": "any",
        "comment": "<p>Additional filter to apply to the DataSource. Can be used to limit selection somehow, w/o re-building the DataSource. E.g. in the linked pickers scenario.</p>"
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": "<p>Gets entity display name. Default it item.name.</p>"
      },
      {
        "name": "getRowOptions",
        "value": "(item: TItem, index: number) => DataRowOptions<TItem, TId>",
        "comment": "<p>Gets options for each row. Allow to make rows non-selectable, as well as many other tweaks.</p>"
      },
      {
        "name": "getSearchFields",
        "value": "(item: TItem) => string[]",
        "comment": "<p>Given an item, should return an array of string fields to search on. By default, the search is performed on item.name field.</p>"
      },
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isFoldedByDefault",
        "value": "(item: TItem) => boolean",
        "comment": "<p>You can return true for all, or some items to fold them.</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "maxDefaultItems",
        "value": "number",
        "comment": "<p>Number of default items to show initially, when nothing is selected.\r\nDefault it 10 items</p>"
      },
      {
        "name": "maxTotalItems",
        "value": "number",
        "comment": "<p>Maximum total number of items to show, including selected</p>"
      },
      {
        "name": "noOptionsMessage",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "renderFilter",
        "value": "(editableFilter: IEditable<any>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderFooter",
        "value": "(props: IModal<any>>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderModalToggler",
        "value": "(props: DataRowProps<TItem, TId>[]) => React.ReactNode",
        "comment": null
      },
      {
        "name": "renderNotFound",
        "value": "(props: { search: string; onClose: () => void; }) => React.ReactNode",
        "comment": "<p>Overrides the default &#39;no records found&#39; banner.\r\nThe &#39;search&#39; callback parameter allows to distinguish cases when there&#39;s no records at all, and when current search doesn&#39;t find anything.</p>"
      },
      {
        "name": "renderRow",
        "value": "(props: DataSourceState<Record<string, any>, any>) => React.ReactNode",
        "comment": "<p>Allow to customize how each selectable row is rendered. Can be used to add subtitles, avatars, etc.</p>"
      },
      {
        "name": "selectionMode",
        "value": "\"single\"",
        "comment": "<p>&#39;single&#39; - only one item is selected. &#39;multi&#39; - multiple items are selected</p>"
      },
      {
        "name": "settingsKey",
        "value": "string",
        "comment": "<p>If provided, top picks will be automatically adjusted based on last user selection, and stored as user setting under provided key</p>"
      },
      {
        "name": "size",
        "value": "none | 24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "sortBy",
        "value": "(item: TItem, sorting: SortingOption<any>) => any",
        "comment": "<p>Defines how items should be sorted. By default, items are shown in order they are provided to the DataSource</p>"
      },
      {
        "name": "sorting",
        "value": "SortingOption<any>",
        "comment": "<p>Defines sorting to pass to the DataSource</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      },
      {
        "name": "valueType",
        "value": "\"id\"",
        "comment": "<p>Defines what to use in value/onValueChange: &#39;id&#39; - item id (TId). &#39;entity&#39; - the item itself (TItem)</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/pickers/pickerToggler.props.tsx": [
      {
        "name": "autoFocus",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "cancelIcon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "caption",
        "value": "any",
        "comment": "<p>Caption. Can be a string, or React.Elements. Certain components supports minimal markup (&lt;b&gt;,&lt;i&gt;,&lt;a&gt;) in captions.</p>"
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "disableClear",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "disableSearch",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "dropdownIcon",
        "value": "Icon",
        "comment": null
      },
      {
        "name": "entityName",
        "value": "string",
        "comment": null
      },
      {
        "name": "getName",
        "value": "(item: TItem) => string",
        "comment": null
      },
      {
        "name": "icon",
        "value": "Icon",
        "comment": "<p>Icon can be an React element (usually an SVG element)</p>"
      },
      {
        "name": "iconPosition",
        "value": "left | right",
        "comment": "<p>Position of the icon (left of right)</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disables component</p>"
      },
      {
        "name": "isDropdown",
        "value": "boolean",
        "comment": "<p>Enabled dropdown mode - component can toggle dropdown</p>"
      },
      {
        "name": "isInteractedOutside",
        "value": "(event: Event) => boolean",
        "comment": "<p>Called when component is interacted outside, to close the dropdown</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isOpen",
        "value": "boolean",
        "comment": "<p>When component acts as dropdown, indicate that dropdown is open</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "isSingleLine",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "maxItems",
        "value": "number",
        "comment": null
      },
      {
        "name": "minCharsToSearch",
        "value": "number",
        "comment": null
      },
      {
        "name": "mode",
        "value": "form | cell | inline",
        "comment": null
      },
      {
        "name": "onBlur",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component looses input focus</p>"
      },
      {
        "name": "onClear",
        "value": "(e?: any) => void",
        "comment": null
      },
      {
        "name": "onClick",
        "value": "(e?: any) => void",
        "comment": "<p>Called when component is clicked</p>"
      },
      {
        "name": "onFocus",
        "value": "(e: React.FocusEvent<T, Element>) => void",
        "comment": "<p>Called when component gets input focus</p>"
      },
      {
        "name": "onIconClick",
        "value": "() => void",
        "comment": "<p>Click handler for the icon</p>"
      },
      {
        "name": "onKeyDown",
        "value": "(e: React.KeyboardEvent<HTMLElement>) => void",
        "comment": null
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "pickerMode",
        "value": "single | multi",
        "comment": null
      },
      {
        "name": "placeholder",
        "value": "any",
        "comment": "<p>Placeholder to display when empty</p>"
      },
      {
        "name": "prefix",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "ref",
        "value": "React.Ref<any>",
        "comment": "<p>Component&#39;s ref</p>"
      },
      {
        "name": "renderItem",
        "value": "(props: DataRowProps<TItem, TId>) => React.ReactNode",
        "comment": null
      },
      {
        "name": "searchPosition",
        "value": "none | input | body",
        "comment": null
      },
      {
        "name": "selection",
        "value": "DataRowProps<TItem, TId>[]",
        "comment": null
      },
      {
        "name": "size",
        "value": "24 | 30 | 36 | 42 | 48",
        "comment": null
      },
      {
        "name": "suffix",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "toggleDropdownOpening",
        "value": "(value: boolean) => void",
        "comment": "<p>Called when associated dropdown should open or close</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/typography/textPlaceholder.props.tsx": [
      {
        "name": "children",
        "value": "React.ReactNode",
        "comment": null
      },
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "isNotAnimated",
        "value": "boolean",
        "comment": null
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "wordsCount",
        "value": "number",
        "comment": null
      }
    ],
    "/app/src/docs/_props/uui/components/widgets/paginator.props.tsx": [
      {
        "name": "getValueChangeAnalyticsEvent",
        "value": "(newValue: T, oldValue: T) => { [key: string]: any; name: string; }",
        "comment": "<p>Given a value, returns an analytics event to send when component is edited.\r\nSee [AnalyticsContext](@link https://uui.epam.com/documents?id=analyticsContext&amp;mode=doc&amp;skin=UUI4_promo&amp;category=contexts).</p>"
      },
      {
        "name": "isDisabled",
        "value": "boolean",
        "comment": "<p>Disable editing, and visually de-emphasize value of the component</p>"
      },
      {
        "name": "isInvalid",
        "value": "boolean",
        "comment": "<p>True if component contains invalid input</p>"
      },
      {
        "name": "isReadonly",
        "value": "boolean",
        "comment": "<p>Disable editing. Unlike isDisabled, keep component&#39;s value readable.</p>"
      },
      {
        "name": "isRequired",
        "value": "boolean",
        "comment": "<p>Marks that component&#39;s value is required</p>"
      },
      {
        "name": "onValueChange",
        "value": "(newValue: T) => void",
        "comment": "<p>Called when value needs to be changed (usually due to user interaction)</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      },
      {
        "name": "render",
        "value": "(params: PaginatorParams) => any",
        "comment": "<p>Override default rendering, keeping the component behavior</p>"
      },
      {
        "name": "size",
        "value": "24 | 30",
        "comment": "<p>Component size</p>"
      },
      {
        "name": "totalPages",
        "value": "number",
        "comment": "<p>Total number of pages</p>"
      },
      {
        "name": "validationMessage",
        "value": "string",
        "comment": "<p>Message describing why the value is invalid</p>"
      },
      {
        "name": "validationProps",
        "value": "{ [key: string]: ICanBeInvalid; }",
        "comment": "<p>If T is a complex value (object or array), this property contains validation states of inner items</p>"
      },
      {
        "name": "value",
        "value": "T",
        "comment": "<p>The current value of component</p>"
      }
    ],
    "/app/src/docs/_props/uui/components/widgets/spinner.props.tsx": [
      {
        "name": "cx",
        "value": "any",
        "comment": "<p>CSS class(es) to put on component&#39;s root. See <a href='https://github.com/JedWatson/classnames#usage'>https://github.com/JedWatson/classnames#usage</a> for details</p>"
      },
      {
        "name": "forwardedRef",
        "value": "React.ForwardedRef<T>",
        "comment": "<p>this ref is passed to the underlying component</p>"
      },
      {
        "name": "rawProps",
        "value": "T & Record<`data-${string}`, string>",
        "comment": "<p>Any HTML attributes (native or &#39;data-&#39;) to put on the underlying component</p>"
      }
    ]
  }
}